#!/bin/bash


## Default variables
# Default config directory
#debug with another config directory CFG_DIR=~/.config/FFFF
CFG_DIR=~/.config/FFF
# "xdg-open" to use the default browser
BROWSER=xdg-open
# yad defaults
YAD_WIDTH=600
YAD_TIMEOUT=300
YAD_TIMEOUT_INDICATOR=top
YAD_HISTORY=$CFG_DIR/history
# Default remote config files and URL
REMOTE_CFG=(Ebay-DE Videos Videos-Alt)
#debug with "python -m http.server 9999" REMOTE_URL="http://localhost:9999"
REMOTE_URL="https://raw.githubusercontent.com/manero6/FFF/configs/config"
# the symbol used to separate each search from the given string
# default is ',' so that csv files can be directly passed as command line option
SEPARATOR=','

check_yad () {
  printf "Checking 'yad' => "
  if ! which yad 2>/dev/null
  then
    echo "Not found!"
    echo "Please install 'yad' or use FFF with the --nogui option."
    exit 127
  fi
}

yad_no_config_files () {
  yad --title FFF \
  --form \
  --field="Using configuration folder:\n\n"$CFG_DIR"\n:LBL" \
  --field="No configuration files found.\nDo you want to download the default configuration files from GitHub?\n:LBL"
}

check_config_dir () {
  # Check if configuration directory is present, if not create it
  if [ ! -d $CFG_DIR ]
  then
    mkdir $CFG_DIR
  fi
}

check_config_files () {
  # Check if configuration directory contains .cfg files, if not prompt to download some from GitHub
  if [ ! "`ls $CFG_DIR/*.cfg 2>/dev/null`" ]
  then
    if yad_no_config_files
    then
      echo "Testing remote connection to GitHub."
      # Check with wget in "dry-run" mode that a remote configuration file is reachable, if so download them all
      if wget -q --spider $REMOTE_URL/${REMOTE_CFG[0]}.cfg
      then
        echo "Connection to GitHub successful. Downloading configuration files."
        for i in ${REMOTE_CFG[@]}
        do
          # Download configuration files from GitHub
          CONFIG_FILE=$CFG_DIR/$i.cfg
          wget -nv $REMOTE_URL/$i.cfg -O $CONFIG_FILE
          ## Checking that wget successfully downloaded from GitHub, else rm the empty file
          #if [ ! -s $CONFIG_FILE ]
          #then
          #  rm $CONFIG_FILE
          #fi
        done
      else
        echo "Download from GitHub failed. Please re-run FFF to try again."
      fi
    else
      echo $?
      echo "Please manually populate the configuration folder or re-run FFF to download the default configuration files from GitHub."
      exit 1
    fi
  fi
}

get_categories () {
  # Create an array containing the search categories
  CATEGORIES=(`basename -s .cfg $(ls $CFG_DIR/*.cfg)`)
  echo -e "Available search categories:\n`for (( i=0 ; i<${#CATEGORIES[@]} ; i++ )); do echo - ${CATEGORIES[$i]}; done`"
}

get_tabs () {
  # Check how many browser tabs each search category will open
  for (( i=0 ; i<${#CATEGORIES[@]} ; i++ ))
  do
    TAB=`grep SEARCH_ $CFG_DIR/${CATEGORIES[$i]}.cfg | grep -v "#" | wc -l`
    TABS+=($TAB)
  done 
  echo ${TABS[@]}
}

create_yad_CHK () {
  # Iterate the search categories and format them to be used as arguments with yad
  #for i in {0..${#CATEGORIES[@]}}
  for (( i=0 ; i<${#CATEGORIES[@]} ; i++ ))
  do
    FIELD="${CATEGORIES[$i]} â€” ${TABS[$i]} tabs"
    YAD_CHK+=("\"--field=$FIELD:CHK\"")
  done
}

yad_FFF () {
  yad --bool-fmt=1 \
  --timeout $YAD_TIMEOUT \
  --timeout-indicator $YAD_TIMEOUT_INDICATOR \
  --title=FFF \
  --width=$YAD_WIDTH \
  --form \
  --field= \
  --rest=$YAD_HISTORY \
  "${YAD_CHK[@]}" \
  --button=Search \
  --buttons-layout=center
}

FFF () {
  ## Store yad options in a variable
  YAD_OPTIONS="--bool-fmt=1 \
    --timeout $YAD_TIMEOUT \
    --timeout-indicator $YAD_TIMEOUT_INDICATOR \
    --title=FFF \
    --width=$YAD_WIDTH \
    --form \
    --field= \
    --rest=$YAD_HISTORY \
    ${YAD_CHK[@]} \
    --button=Search \
    --buttons-layout=center"

  # Store yad command and some more options in a variable
  YAD_COMMAND="yad $YAD_OPTIONS"
  #YAD_COMMAND="`yad_FFF`"

  # Execute yad and store its output in an array
  IFS='|' ; YAD_OUTPUT=(`eval $YAD_COMMAND`)
  #IFS='|' ; YAD_OUTPUT=(`yad_FFF`)
  echo ${YAD_OUTPUT[0]} ${YAD_OUTPUT[@]}
  # Write to history file only if search field is not empty
  if [ ! -z ${YAD_OUTPUT[0]} ]
  then
    echo -e "History file updated with entry:\n=> ${YAD_OUTPUT[0]}"
    echo ${YAD_OUTPUT[0]} > $YAD_HISTORY
  fi

  # Store the provided text field in an array
  #IFS=';' && WORDS=(`echo "${YAD_OUTPUT[0]}"`)
  IFS=$SEPARATOR && WORDS=(`echo "${YAD_OUTPUT[0]}"`)
  echo aa${WORDS[1]}
  echo bb${#WORDS[@]}
  
  if [ ${#WORDS[@]} = 0 ]
  then
    # Exit when no input provided
    echo -e "Aborting as the search field was empty.\nPlease provide something to search."
    exit 1
  else
    # Iterate the search entries
    for WORD in "${WORDS[@]}"
    do
      # Substitute whitespace with:
      # plus sign + 
      WORD_PLUS=$(echo $WORD | sed 's/ /+/g')
      # minus sign -
      WORD_MINUS=$(echo $WORD | sed 's/ /-/g')
      # percent encoding %20
      WORD_PERC=$(echo $WORD | sed 's/ /%20/g')

      # Iterate the search categories
      for (( i=0 ; i<${#CATEGORIES[@]} ; i++ ))
      do
        # Check if search category checkbox was selected, if so apply the search
        if [ ${YAD_OUTPUT[$i + 1]} = 1 ]
        then
          echo "Searching ${CATEGORIES[$i]}"
          source $CFG_DIR/${CATEGORIES[$i]}.cfg
          IFS=$'\n' ; for SEARCH_URL in `grep SEARCH_ $CFG_DIR/${CATEGORIES[$i]}.cfg | grep -v "#" | cut -d= -f2`
          do
            SEARCH="$BROWSER $SEARCH_URL"
            #echo $SEARCH
            eval $SEARCH
            sleep 0.1
          done
          sleep 1
        fi
      done
    done
  fi
}

main () {
  check_yad
  check_config_dir
  check_config_files
  get_categories
  get_tabs
  create_yad_CHK
  FFF
}

main
